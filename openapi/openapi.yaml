openapi: 3.1.0
info:
  title: Vana Personal-Server API
  version: "0.1.0"
  description: |
    A user-scoped compute service that executes permissioned operations
    (LLM inference, vector search, decryption, …) on private data.
    The contract is provider-agnostic, uses a clear /operations resource
    model, and defines a single streaming media-type (Server-Sent Events).

servers:
  - url: https://server.vana.com/api/v1

# ───────────────────────────────────────────────────────────────────────────
components:
  securitySchemes:
    VanaSignature:                # ECDSA secp256k1 HTTP signature in header
      type: apiKey
      in: header
      name: X-Vana-Signature
      description: |
        Canonical-request signature proving control of the caller’s wallet.
        The server derives the wallet address from the signature.

  parameters:
    OpId:
      name: id
      in: path
      required: true
      schema: { type: string }
      description: Unique operation identifier.

  schemas:
    EthereumAddress:
      type: string
      description: EIP-55 checksum address, 20 bytes, 0x-prefixed.
      pattern: '^0x[a-fA-F0-9]{40}$'
      example: '0xf0ebD65BEaDacD191dc96D8EC69bbA4ABCf621D4'

    ExecuteRequest:
      type: object
      required: [permissionGrant]
      additionalProperties: false
      properties:
        permissionGrant:
          description: On-chain PermissionGrant identifier or keccak256 hash.
          oneOf:
            - type: integer
            - type: string
      example:
        permissionGrant: 1024

    OperationCreated:
      type: object
      required: [id, created_at, links]
      properties:
        id:
          type: string
          example: z4spp7fpynrma0cqtnavem91sg
        created_at:
          type: string
          format: date-time
          example: "2025-07-04T12:07:50.261Z"
        links:                       # relative paths → no vendor lock-in
          type: object
          required: [self, cancel, stream]
          properties:
            self:   { type: string, format: uri, example: "/operations/z4spp7fpynrma0cqtnavem91sg" }
            cancel: { type: string, format: uri, example: "/operations/z4spp7fpynrma0cqtnavem91sg" }
            stream: { type: string, format: uri, example: "/operations/z4spp7fpynrma0cqtnavem91sg/stream" }

    OperationStatus:
      type: object
      required: [id, status]
      properties:
        id:     { type: string }
        status: { type: string, enum: [pending, running, succeeded, failed, cancelled] }
        started_at:   { type: string, format: date-time, nullable: true }
        finished_at:  { type: string, format: date-time, nullable: true }
        result:       { type: string, nullable: true, description: Result data or link (present on success). }
        prediction_id:{ type: string, nullable: true, description: Underlying Replicate prediction ID (optional). }

    IdentityResponse:
      type: object
      required: [user_address, personal_server]
      properties:
        user_address:
          $ref: '#/components/schemas/EthereumAddress'
        personal_server:
          type: object
          required: [address, public_key]
          properties:
            address:    { $ref: '#/components/schemas/EthereumAddress' }
            public_key:
              type: string
              example: '0x04bcdf3e…'   # uncompressed secp256k1 key

# ───────────────────────────────────────────────────────────────────────────
paths:
  /operations:
    post:
      summary: Start an operation (asynchronous)
      security: [ { VanaSignature: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ExecuteRequest' }
      responses:
        "202":
          description: Accepted — operation handle returned.
          headers:
            Location:
              description: Absolute URL of the created operation.
          schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OperationCreated' }
        "401": { description: Invalid or missing X-Vana-Signature }
        "404": { description: PermissionGrant not found }
        "422": { description: Grant invalid or expired }
        "500": { description: Server error }

  /operations/{id}:
    parameters: [ { $ref: '#/components/parameters/OpId' } ]

    get:
      summary: Poll operation status / result
      responses:
        "200":
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OperationStatus' }
        "404": { description: Operation not found }

    delete:
      summary: Cancel a running operation
      responses:
        "204": { description: Operation cancelled or already finished }
        "404": { description: Operation not found }

  /identity:
    get:
      summary: Derive deterministic server identity for a user
      parameters:
        - name: address
          in: query
          required: true
          schema: { $ref: '#/components/schemas/EthereumAddress' }
          description: Caller’s wallet address (EIP-55).
      responses:
        "200":
          content:
            application/json:
              schema: { $ref: '#/components/schemas/IdentityResponse' }
        "400": { description: Invalid address }
        "500": { description: Server error }
